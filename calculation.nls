globals
[
  test_file
]

; ini adalah untuk menjumlahkan total api dari tick ke tick sampai habis
to reset-total-fires
  set sum-tf sum-tf + total-fire
  set sum-tfa sum-tfa + total-fire-above
  set sum-tfb sum-tfb + total-below-fire

  set total-fire 0
  set total-fire-above 0
  set total-below-fire 0
end

to set-lists
  set list-tf []
  set list-tfa []
  set list-tfb []
  set list-burnt-patches []
  set list-unburnt-patches []
end

;ini adalah untuk menghitung dan menyimpan nilai per tick nya
to save-fires-ticks
  set list-tf lput total-fire list-tf
  set list-tfa lput total-fire-above list-tfa
  set list-tfb lput total-below-fire list-tfb
  set list-burnt-patches lput burnt-patches list-burnt-patches
  set list-unburnt-patches lput (count patches - burnt-patches) list-unburnt-patches
end

to count-fires
  set total-fire total-fire-above + total-below-fire
end

to-report random-normal-in-bounds [mid dev mmin mmax]
  let result random-normal mid dev
  if result < mmin or result > mmax
    [ report random-normal-in-bounds mid dev mmin mmax ]
  report result
end

to-report random-gamma-in-bounds [alpha lambda mmin mmax]
  let result random-gamma alpha lambda
  if result < mmin or result > mmax
    [ report random-gamma-in-bounds alpha lambda mmin mmax ]
  report result
end

to set-burnt-val
  ask patches
  [
    ifelse burnt? = true
    [set burnval 1]
    [set burnval 0]
  ]
end

to-report raster-output [filename param]
  ifelse ticks = 365
  [
  set-burnt-val
  ;create raster with a given file name
  gis:set-transformation (list -180 180 -90 90) (list min-pxcor max-pxcor min-pycor max-pycor)
  ask patches [
    set test_file gis:patch-dataset burnval ;change this, we are not using pcolor, we are using burnt or not burnt
  ]
  gis:store-dataset test_file (word filename param ".asc")
    report true]
  [report false]
end